---
layout: post
title:      "Learning to Learn"
date:       2018-02-05 21:12:53 -0500
permalink:  from_architecture_to_programming
---

When the recession was at its low point in 2010,  I was about to graduate from the University of Cincinnati with a degree in architecture. The building industry was looking pretty grim and it was difficult to land a new grad job. On the bright side, it gave me a chance to explore other fields of work for self-growth before returning to the realm of architecture. After returning to architecture, I worked at design and construction firms based in New York City for a number of years. 

In architecture offices, I referenced building codes regularly when determining the design and construction of a structure and used software programs to draft in 2D, and also to visualize it in 3D. My earliest exposure to coding was when I started using design software such as CAD (computer-aided design software). In order to draw more efficiently in a CAD drawing document, it is good practice to create a 'block definition' for when block geometries are used more than once such as structural columns, windows, doors etc. The door or window can be represented in a single 'block definition' which can be drawn once and when modified, all instances of that block inserted in the drawing will be automatically updated. To simplify a complex block definition further, you could also create a nested block structure by nesting several blocks within a containing block. Later on, I heard of the term 'object-oriented programming' when I first started using another powerful design program called Revit, an application built for [BIM - Building Information Modeling](https://www.archdaily.com/302490/a-brief-history-of-bim).

Though I enjoyed using software design programs at work, I questioned whether this career was the right path for me. Most of the time I wasn't really as involved in updating my tech skills as often as I would like. Most of the deadline driven projects would mean getting pigeon-holed into doing repetitive tasks. This feeling of stagnancy coupled with doing a lot of unpaid overtime for a relatively low-salary made me face some tough questions. I had to admit to myself that even though I liked architecture, room for growth wasn’t as dynamic as other industries. As my life started to take on other changes, I felt that I needed a schedule with more flexibility that wasn't really possible in this industry’s work culture and environment. So I found myself asking the question of what else did I want to explore and how did I want to expand my skillset? 

During this time, one of my friends had contacted me and told me she was transitioning from teaching to web development. I was intrigued as to how she found out about it and what course she had taken. She had taken a part-time course while working, but told me to check out courses on [Treehouse](https://teamtreehouse.com/), and to see what I thought. I tried it out and continued to dabble in various online coding resources like the algorithm platform on [Coding Dojo](http://algorithm.codingdojo.com/). I also attended meetups and even a hackathon in another city where I spent more time observing than contributing. By trying these different resources, I started to get fragments of what it meant to code and how it related to the software programs that I was using at work. My friends and mentors that had transitioned into programming jobs from other job sectors encouraged me to stay curious and basically just to keep on doing it. And that is exactly what I did - I stayed involved and utilized the free code resources and tried to meet other people. Michael Hartl's online tutorials -  [Learn Enough to be Dangerous](https://www.learnenough.com/) were one of the free online code resources that really made things click in my head. Here I learned how to use a text editor, command line and git.  

This changed my perspective on where I saw my career path going and where I wanted it to be. What I was willing to do was explore and expand my skillset in the programming realm. I did a bit of Flatiron school's free pre-bootcamp prep-work and weighed my options as to why this was better than other programs. The online program at Flatiron School provided resources to becoming a full-stack developer with a job guarantee. This seemed to be the best way to go since I wanted to do an online program that provided flexibility in scheduled times for learning. The program also provided the opportunity to attend in-person meetups or workshops at Flatiron School for free. After I applied to their Online Developer Program, I got a response and was also awarded the Women Take Tech Scholarship. This made it possible for me to pursue my learning full-time. 

Learning how to program has become a bit obsessive where the more your code breaks, the more you want to learn from your mistakes and make it better. I'll be using this blog to document my thoughts on what I've learned so far on my coding journey. Stay tuned and thanks for reading!
